#!/usr/bin/env bash
set -euo pipefail

# Nombre de la ISO 
ISO_BASENAME="debian-13.1.0-amd64-netinst"

DL_DIR="$HOME/Descargas"
[ -d "$DL_DIR" ] || DL_DIR="$HOME/Downloads"

FULLNAME="Esteban Alvarado"
USERNAME="esteban"
LOCALE="es_CL.UTF-8"
KEYMAP="latam"
TIMEZONE="America/Santiago"

HOSTNAME="debian"
DOMAIN="local"

TARGET_DISK="/dev/sda"

# Paquetes a instalar
INSTALL_MARIADB=true 
EXTRA_PACKAGES="sudo openssh-server xserver-xorg-video-all"
DESKTOP_TASK="gnome-desktop"

BOOT_TIMEOUT_SECS=0
#Fin de configuración editable

# Resolver nombre exacto del archivo ISO
ISO_FILE="$DL_DIR/$ISO_BASENAME"
[[ -f "$ISO_FILE" ]] || ISO_FILE="$DL_DIR/$ISO_BASENAME.iso"
if [[ ! -f "$ISO_FILE" ]]; then
  echo "No encuentro la ISO en: $DL_DIR/$ISO_BASENAME(.iso)"
  exit 1
fi

# Dependencias
echo "[+] Instalando dependencias..."
sudo apt update -y
sudo apt install -y xorriso syslinux-common isolinux openssl

# Preparar directorios de trabajo
WORKDIR="$(mktemp -d -t debauto-XXXXXX)"
EXTRACT="$WORKDIR/extract"
OUT_DIR="$HOME"
OUT_ISO="$OUT_DIR/debian-13.1.0-amd64-netinst-AUTO.iso"
mkdir -p "$EXTRACT"

echo "[+] Extrayendo contenido de la ISO (sin montar)..."
xorriso -osirrox on -indev "$ISO_FILE" -extract / "$EXTRACT"

if [[ ! -f "$EXTRACT/isolinux/isohdpfx.bin" ]]; then
  if [[ -f "/usr/lib/ISOLINUX/isohdpfx.bin" ]]; then
    sudo cp /usr/lib/ISOLINUX/isohdpfx.bin "$EXTRACT/isolinux/isohdpfx.bin"
  fi
fi

# Pedir contraseña para el usuario
echo
read -r -s -p "Contraseña para el usuario '$USERNAME': " USERPASS
echo
read -r -s -p "Repite la contraseña: " USERPASS2
echo
if [[ "$USERPASS" != "$USERPASS2" ]]; then
  echo "Las contraseñas no coinciden. Abortando."
  exit 1
fi
USER_PASSWORD_HASH="$(openssl passwd -6 "$USERPASS")"
unset USERPASS USERPASS2

# Construir lista de paquetes
PKG_INCLUDE="$EXTRA_PACKAGES"
if $INSTALL_MARIADB; then
  PKG_INCLUDE="$PKG_INCLUDE mariadb-server"
fi

# Crear preseed.cfg
echo "[+] Generando preseed.cfg..."
cat > "$EXTRACT/preseed.cfg" <<EOF
### Prioridad para evitar prompts
d-i debconf/priority string critical

### Locale y teclado
d-i debian-installer/locale string $LOCALE
d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/xkb-keymap select $KEYMAP

### Red (DHCP y host)
d-i netcfg/choose_interface select auto
d-i netcfg/get_hostname string $HOSTNAME
d-i netcfg/get_domain string $DOMAIN

### Reloj y zona horaria
d-i clock-setup/utc boolean true
d-i time/zone string $TIMEZONE
d-i clock-setup/ntp boolean true

### Mirror
d-i mirror/country string manual
d-i mirror/http/hostname string deb.debian.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string

### Firmware no libre (útil para drivers)
d-i hw-detect/load_firmware boolean true
d-i apt-setup/non-free boolean true
d-i apt-setup/contrib boolean true
d-i apt-setup/non-free-firmware boolean true

### Usuarios (deshabilitar root y crear usuario normal)
d-i passwd/root-login boolean false
d-i passwd/user-fullname string $FULLNAME
d-i passwd/username string $USERNAME
d-i passwd/user-password-crypted password $USER_PASSWORD_HASH
d-i user-setup/allow-password-weak boolean true

### Particionado automático (BORRA $TARGET_DISK)
d-i partman-auto/disk string $TARGET_DISK
d-i partman-auto/method string regular
d-i partman-auto/choose_recipe select atomic
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

### Selección de tareas y paquetes
tasksel tasksel/first multiselect standard, $DESKTOP_TASK
d-i pkgsel/include string $PKG_INCLUDE
d-i pkgsel/upgrade select safe-upgrade
d-i pkgsel/update-policy select unattended-upgrades
popularity-contest popularity-contest/participate boolean false

### Gestor de arranque
d-i grub-installer/target string default
d-i grub-installer/force_install boolean true 
d-i grub-installer/bootdev string /dev/sda 
# d-i grub-installer/with_grub boolean true

d-i finish-install/reboot_in_progress note

### Post-configuración (late_command)
d-i preseed/late_command string \
    in-target usermod -aG sudo $USERNAME; \
    in-target systemctl enable ssh; \
    in-target bash -c 'mkdir -p /etc/lightdm/lightdm.conf.d && printf "[Seat:*]\nautologin-user=$USERNAME\nautologin-user-timeout=0\n" > /etc/lightdm/lightdm.conf.d/50-autologin.conf';
EOF

# Ajustes de arranque BIOS (ISOLINUX): agregar entrada automática y ponerla por defecto
if [[ -d "$EXTRACT/isolinux" ]]; then
  echo "[+] Configurando ISOLINUX (BIOS)..."
  if [[ -f "$EXTRACT/isolinux/txt.cfg" ]]; then
    cat >> "$EXTRACT/isolinux/txt.cfg" <<'EOF'
label auto
    menu label ^Instalación automática (preseed)
    kernel /install.amd/vmlinuz
    append auto=true priority=critical locale=es_CL.UTF-8 keyboard-configuration/xkb-keymap=latam preseed/file=/cdrom/preseed.cfg netcfg/choose_interface=auto nomodeset initrd=/install.amd/initrd.gz ---
EOF
  else
    cat > "$EXTRACT/isolinux/txt.cfg" <<'EOF'
default auto
timeout 1
prompt 0

label auto
    menu label ^Instalación automática (preseed)
    kernel /install.amd/vmlinuz
    append auto=true priority=critical locale=es_CL.UTF-8 keyboard-configuration/xkb-keymap=latam preseed/file=/cdrom/preseed.cfg netcfg/choose_interface=auto nomodeset initrd=/install.amd/initrd.gz ---
EOF
  fi

  for f in "$EXTRACT/isolinux/isolinux.cfg" "$EXTRACT/isolinux/menu.cfg"; do
    if [[ -f "$f" ]]; then
      sed -i 's/^default .*/default auto/' "$f" || true
      if grep -q '^timeout' "$f"; then
        sed -i 's/^timeout .*/timeout 1/' "$f" || true  # 0.1 seg
      else
        echo "timeout 1" >> "$f"
      fi
      if grep -q '^prompt' "$f"; then
        sed -i 's/^prompt .*/prompt 0/' "$f" || true
      else
        echo "prompt 0" >> "$f"
      fi
      if ! grep -q '^menu hidden' "$f"; then
        echo "menu hidden" >> "$f"
      fi
    fi
  done
fi

# Ajustes de arranque UEFI (GRUB): insertar entrada automática al inicio y timeout 0
GRUBCFG="$EXTRACT/boot/grub/grub.cfg"
if [[ -f "$GRUBCFG" ]]; then
  echo "[+] Configurando GRUB (UEFI)..."
  AUTO_ENTRY=$(cat <<'EOF'
menuentry "Instalación automática (preseed)" {
    set gfxpayload=keep
    linux /install.amd/vmlinuz auto=true priority=critical locale=es_CL.UTF-8 keyboard-configuration/xkb-keymap=latam preseed/file=/cdrom/preseed.cfg netcfg/choose_interface=auto nomodeset ---
    initrd /install.amd/initrd.gz
}
EOF
)
  printf "%s\n\n%s" "$AUTO_ENTRY" "$(cat "$GRUBCFG")" > "$GRUBCFG"
  if grep -q '^set default=' "$GRUBCFG"; then
    sed -i 's/^set default=.*/set default=0/' "$GRUBCFG"
  else
    sed -i '1i set default=0' "$GRUBCFG"
  fi
  if grep -q '^set timeout=' "$GRUBCFG"; then
    sed -i 's/^set timeout=.*/set timeout=0/' "$GRUBCFG"
  else
    sed -i '1i set timeout=0' "$GRUBCFG"
  fi
fi

# Reconstruir ISO híbrida (BIOS/UEFI)
echo "[+] Reconstruyendo ISO..."
pushd "$EXTRACT" >/dev/null

EFI_ELTORITO_ARGS=()
if [[ -f "boot/grub/efi.img" ]]; then
  EFI_ELTORITO_ARGS=( -eltorito-alt-boot -e boot/grub/efi.img -no-emul-boot )
fi

ISOHYBRID_MBR_ARG=()
if [[ -f "isolinux/isohdpfx.bin" ]]; then
  ISOHYBRID_MBR_ARG=( -isohybrid-mbr isolinux/isohdpfx.bin )
fi

xorriso -as mkisofs \
  -r -J -joliet-long -iso-level 3 \
  -V "DEBIAN_13_AUTO" \
  -o "$OUT_ISO" \
  "${ISOHYBRID_MBR_ARG[@]}" \
  -b isolinux/isolinux.bin \
  -c isolinux/boot.cat \
  -no-emul-boot -boot-load-size 4 -boot-info-table \
  "${EFI_ELTORITO_ARGS[@]}" \
  -isohybrid-gpt-basdat \
  .

popd >/dev/null

echo "[+] ISO creada: $OUT_ISO"
echo "[i] md5sum:"
md5sum "$OUT_ISO" || true

echo
echo "=== Listo ==="
echo "Para grabarla en USB (¡elige bien el dispositivo!):"
echo "  lsblk"
echo "  sudo dd if=\"$OUT_ISO\" of=/dev/sdX bs=4M status=progress oflag=sync"
echo
echo "Esta ISO arrancará e iniciará la instalación automática con XFCE, usuario '$USERNAME', SSH habilitado y autologin."
